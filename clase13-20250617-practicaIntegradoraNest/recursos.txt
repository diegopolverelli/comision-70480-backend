Encuesta presentación alumnos:
https://forms.gle/3nZVjJmeFXXAFggh8


Repositorio material clases:
https://github.com/diegopolverelli/comision-70480-backend

Express-generator:
https://expressjs.com/en/starter/generator.html

Repo proyecto con el que vamos a trabajar durante el curso:
https://github.com/CoderContenidos/RecursosBackend-Adoptme

Servidor Proxy
https://nginx.org/en/docs/

Testing Jest:
https://jestjs.io/

Clean Code:
https://github.com/andersontr15/clean-code-javascript-es

String de conexión a MongoDB Atlas
MONGO_URL=mongodb+srv://coderhouse:codercoder2023@cluster0.wpxpupc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

Playlist clase (fundamental...!!!):
https://open.spotify.com/playlist/5GX2x4fbBnJKRO0qsg2Gm8?si=ec273740e52b473e



CONTENIDOS POSIBLES SWAGGER:
Tipos de Contenido (content):
application/json: Este es el tipo de contenido estándar para respuestas JSON.
application/xml: Si necesitas admitir respuestas en formato XML.
text/plain: Para respuestas de texto sin formato.
multipart/form-data: Si estás manejando datos de formulario.
application/octet-stream: Para respuestas binarias.

Tipos de Esquema (schema):
object: Para objetos JSON.
string: Para cadenas de texto.
number: Para números.
boolean: Para valores booleanos.
array: Para arreglos.
integer: Para valores enteros.

EJEMPLOS content's SWAGGER:
content:
  application/json:
    schema:
      type: object
      properties:
        birthDate:
          type: string
          format: date
        lastUpdated:
          type: string
          format: date-time
        emailAddress:
          type: string
          format: email
        website:
          type: string
          format: uri
        uniqueId:
          type: string
          format: uuid


PARAMETROS SWAGGER:
Posibles valores para "in":
path: El parámetro viene en la ruta
query: Los parámetros se envían en la URL como parte de la cadena de consulta 
(por ejemplo, ?uid=123).
header: Los parámetros se envían en la cabecera de la solicitud HTTP.
cookie: Los parámetros se envían como cookies en la solicitud.
formData: Utilizado para parámetros de formulario en solicitudes POST. 





Dependencias para realizar autenticación, "alternativas" a Passport:
- AuthJS (express aún experimental):
https://authjs.dev/getting-started/installation?framework=Express
https://www.npmjs.com/package/@auth/express
- Auth0:
https://auth0.com/docs/quickstart/backend/nodejs/interactive
https://www.npmjs.com/package/express-oauth2-jwt-bearer


npm i express-async-errors
import "express-async-errors"
require('express-async-errors')


export const TIPOS_ERROR={
    TIPO_DE_DATOS: 400, 
    ARGUMENTOS_INVALIDOS: 400, 
    AUTENTICACION: 401, 
    AUTORIZACION: 403, 
    NOT_FOUND: 404, 
    INTERNAL_SERVER_ERROR: 500
}

// ******************************************
artillery quick -c 20 -n 40 http://localhost:3000/op1 -o resultadoOP1.json 
artillery report resultadoOP1.json -o informe.html

// ******************************************
nvm:
// ******************************************
node --watch --env-file ./src/.env ./src/app

// ******************************
npm:
// ******************************
https://docs.npmjs.com/creating-and-publishing-scoped-public-packages

npm login
npm version patch
npm publish
npm list express  (muestra la versión que tenemos instalada)
npm list --depth=3  (muestra la version instalada, y sus dependencias)
npm info    (muestra la version de internet de un paquete)
npm view    (muestra la version de internet de un paquete)


// ****************************
Yarn:
// ****************************
corepack enable
yarn init -2 (nuevas versiones) o yarn init -1 (versión vieja)
yarn set version stable
yarn install

En modo pnp (por defecto), para ejecutar node debo hacerlo vía 
scripts start o dev, configurados en el package.json

Despues, si quiero trabajar con los node-modules (sin pnp), crear 
el archivo .yarnrc.yml, que incluya la linea:
nodeLinker: node-modules

nodeLinker: pnp   (para que funcione sin los node_modules)
// ****************************


